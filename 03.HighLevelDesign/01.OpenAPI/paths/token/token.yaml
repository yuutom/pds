post:
  operationId: postToken
  security:
  tags:
    - token
  summary: アクセストークン発行
  description: |
    # 概要
    HTTPヘッダのPDSユーザID・タイムスタンプとリクエストの暗号化文字列1と暗号化文字列2とで認証を行い、<br>
    アクセストークンを発行する機能。<br>
    アクセストークンは初回実行時はアクセストークン発行APIにより発行される。<br>
    アクセストークンは個人情報に関するAPI群（transaction機能）を利用するための認証情報として利用される。<br>
    アクセストークン取得後に個人情報に関するAPI群（transaction機能）を利用すると有効期限を更新した新しいアクセストークンがAPIから返却される。<br>
    アクセストークンの有効期限は1,000ミリ秒。
    # 認証
    公開APIの各処理はアクセストークン発行APIで発行されたアクセストークンを用いて認証を行う。<br>
    アクセストークンには期限があり、期限を過ぎたものは利用できない。

    # ベーステキスト
    * ベーステキストの概要：<br>
        APIキーとタイムスタンプの連結文字列です。
    * ベーステキストの形式：<br>
        `[APIキー][タイムスタンプ]`<br>
          ・ APIキーとタイムスタンプの間には、半角スペースなどの補完は行わず、直接連結してください。<br>
          ・ ベーステキストの一例：
            ```
            OI7XyUYNnU8ejlkg0OU4iC3BUsnUsi2022/01/01 12:34:56.789
            ```
    * APIキー：<br>
        ・ PDSユーザごとに対して割り振られる一意のキーです。<br>
        ・ PDSユーザ登録時に発行致します。<br>
        ・ APIキーの一例：
            ```
            OI7XyUYNnU8ejlkg0OU4iC3BUsnUsi
            ```
    * タイムスタンプ：<br>
        ・ 形式はyyyy/MM/dd△hh:mm:ss.iiiとなります。<br>
        ・ 「△」は半角スペースを意味します。<br>
        ・ 後述するHEADER PARAMETERSのタイムスタンプと同一の値を指定してください。<br>
        ・ タイムスタンプーの一例：
            ```
            2022/01/01 12:34:56.789
            ```

  parameters:
    - name: pdsUserId
      in: header
      description: 入力規則：```^C\d{7}$```
      required: true
      schema:
        $ref: '#/components/schemas/pdsUserId'
    - name: timeStamp
      in: header
      description: |
        タイムスタンプ<br>
        形式は「yyyy/MM/dd hh:mm:ss.iii」とする
      required: true
      schema:
        $ref: '#/components/schemas/timeStamp'
    - name: pdsUserDomainName
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/pdsUserDomainName'
  requestBody:
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/postTokenRequest'
    required: true
  responses:
    '200':
      description: 正常終了レスポンス
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/postTokenResponse'
    '400':
      description: |
        Bad Request: エラーコード一覧
        |エラーコード|エラー名|メッセージ|置換対象|内容|
        |------------|----------|----|----|----|
        |010005|アクセストークン発行エラー|アクセストークン発行できませんでした。||アクセストークン発行APIチェックエラー時のエラーです。

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponseBody'
    '500':
      $ref: '#/components/schemas/errorResponseBody500'


components:
  schemas:
    pdsUserId:
      $ref: '../../components/header/PdsUserId.yaml'
    timeStamp:
      $ref: '../../components/header/TimeStamp.yaml'
    pdsUserDomainName:
      $ref: '../../components/parameters/pdsUserDomainName.yaml'
   
    postTokenRequest:
      description: 
      type: object
      properties:
        code1:
          title: 暗号化文字列1
          description: |
           暗号化文字列1の生成方法：
            1. 「ベーステキスト」をバイト配列に変換する。(エンコード形式：UTF-8)
            2. 手順1で得たバイト配列をトッパンフォームズ側が発行したRSA公開鍵で暗号化する。(暗号方式：RSA-OAEP (with SHA-1))
            3. 手順2で得たバイト配列をBase64文字列(URLエンコード)に変換する。

            URLエンコード例：<br>
            ```QodfPDGsnjoASv4iY6T8H8G9nnpF7DsavJSwFA9o1gTNAjekKOGTBnGwgT14VF8veDRcxrF64bCzjN%2BKSh41cJ9NnWCjOn25Ue7qDND6fSA1WVhpgLCgML%2FjfvszFLI6zIZTn7lhKzucK3z4hKWH77K2NfYBZj7BpKJVHWGq3kMhJM5M%2BVhXXbDe63qUPuhUBddmBJ3EGRmztDxyvLlCh%2B9Aarv4m4VhzZDf6oGmM56v6AArJRQaiZRvbkfomVtkRQxur3YL2sNqffABz5%2BNtLne5IfxDQaZbL5huNmZWyx3zHtXQy6f7KCZHVaXITIPVqywhzdxMdwmczeVk%2F0qxlrwOB9HUlr4iumW%2B1mFtCPNmzwZ%2BbTkq5JrX9oum2MJr8gOOHw4eop3yqStivojHMk7eW%2Fd29Cm%2FNmAixOYdwzmhs72EOloMyuaa31ZZuXDthoirIZTukQ3GSkVkjK5pfhFcHouNhLKfBSMG6zSEoy2XBJB1%2BZN5Acbd7fNhPDf%2FEsdLF%2BT6uqZkDJECVHIZVGTNW9A2v%2BNWcwZCAcpI%2F%2BJyx45jiJn07neZnwfPqFAxXsYlbWLWNcQGybPojUxfrH3nLppCidXIFif38r4V%2FqdbPp0tOSVFL3v1c9%2BVaaNMdXeKEKQY%2BVq%2BpMi3yDxqZbiO4CqAEAEIw52k17LQKU%3D```
          example: QodfPDGsnjoASv4iY6T8H8G9nnpF7DsavJSwFA9o1gTNAjekKOGTBnGwgT14VF8veDRcxrF64bCzjN%2BKSh41cJ9NnWCjOn25Ue7qDND6fSA1WVhpgLCgML%2FjfvszFLI6zIZTn7lhKzucK3z4hKWH77K2NfYBZj7BpKJVHWGq3kMhJM5M%2BVhXXbDe63qUPuhUBddmBJ3EGRmztDxyvLlCh%2B9Aarv4m4VhzZDf6oGmM56v6AArJRQaiZRvbkfomVtkRQxur3YL2sNqffABz5%2BNtLne5IfxDQaZbL5huNmZWyx3zHtXQy6f7KCZHVaXITIPVqywhzdxMdwmczeVk%2F0qxlrwOB9HUlr4iumW%2B1mFtCPNmzwZ%2BbTkq5JrX9oum2MJr8gOOHw4eop3yqStivojHMk7eW%2Fd29Cm%2FNmAixOYdwzmhs72EOloMyuaa31ZZuXDthoirIZTukQ3GSkVkjK5pfhFcHouNhLKfBSMG6zSEoy2XBJB1%2BZN5Acbd7fNhPDf%2FEsdLF%2BT6uqZkDJECVHIZVGTNW9A2v%2BNWcwZCAcpI%2F%2BJyx45jiJn07neZnwfPqFAxXsYlbWLWNcQGybPojUxfrH3nLppCidXIFif38r4V%2FqdbPp0tOSVFL3v1c9%2BVaaNMdXeKEKQY%2BVq%2BpMi3yDxqZbiO4CqAEAEIw52k17LQKU%3D
          type: string
          minLength: 684
          maxLength: 2052
          pattern: '[a-zA-Z0-9%]'
        code2:
          title: 暗号化文字列2
          description: |
           暗号化文字列2の生成方法：
            1. 暗号化文字列1の生成方法手順2で得たバイト配列をハッシュ化する。(アルゴリズム：SHA256)
            2. 手順1で得たバイト配列をPDSユーザ側が発行したRSA秘密鍵で暗号化する。(暗号化方式：RSA-OAEP(with SHA-1))
            3. 手順2で得たバイト配列をBase64文字列(URLエンコード)に変換する。

            URLエンコード例：<br>
            ```aSw7kAsTjZhENqHd6XJzETK8YeHd2XbFA4qz%2BzMXxCB2mxynBCZTFoA2%2FQ453mXPptL1jJCv1tLyOLjsOzTqFGcHG1xxhiyNWMMqD542gjCCZNe38YgmfO0CZl2QHyZPlTKV0NbPi%2B32xfdFaYEZxT%2BI9o6I3FTetdSYxszLqu9R7JKhcNaAebia6b7G%2FyD4QnH%2F57njUnNPSV2f5AibmhXhShdb5i7XYHNskRAXZ98rKP9UDye0NXtXhgsqIbJ9DbztTgMhYcL7VMleeJFBegkxSM1SY5wz9FJweLTPDI5VE0wQh%2Fyrsix8Lx5mkw0oN3QSOOV4tj4JhQJT5hifT3n2lT0ZVYx69ZZ%2B9DCKGdfh%2FI2DYJ3IZCYXfpAhd%2B7%2FxYe1a4rNBdik%2FUVaJZPuuS%2F6uP8IljhAwDfXNp5XAFv0vFQiXNQc7PYIPO4r6WMOJycQcUoEENPZryMZ5m7peu4JgFKXUpGwkR2zUm4d4LLc4QHVptUfX8nv2E4MAYGKm6tq1mckqqunz8bUYmD53xI%2BddW7oXX0Yrs79zjnUX%2FsuDckYvXuKucq0ETi6e%2FxdN%2FrL%2BtxZcK1Y8N0iczTOFUs%2FKbhKg8ZwA6F2KK5%2BT%2FOlDaRfQD4mNoBsRSjTXeXMD36sDM8XnazzOUKDvjyKx%2BNePIwSeWEgdCjbRTdXV0%3D```

          example: aSw7kAsTjZhENqHd6XJzETK8YeHd2XbFA4qz%2BzMXxCB2mxynBCZTFoA2%2FQ453mXPptL1jJCv1tLyOLjsOzTqFGcHG1xxhiyNWMMqD542gjCCZNe38YgmfO0CZl2QHyZPlTKV0NbPi%2B32xfdFaYEZxT%2BI9o6I3FTetdSYxszLqu9R7JKhcNaAebia6b7G%2FyD4QnH%2F57njUnNPSV2f5AibmhXhShdb5i7XYHNskRAXZ98rKP9UDye0NXtXhgsqIbJ9DbztTgMhYcL7VMleeJFBegkxSM1SY5wz9FJweLTPDI5VE0wQh%2Fyrsix8Lx5mkw0oN3QSOOV4tj4JhQJT5hifT3n2lT0ZVYx69ZZ%2B9DCKGdfh%2FI2DYJ3IZCYXfpAhd%2B7%2FxYe1a4rNBdik%2FUVaJZPuuS%2F6uP8IljhAwDfXNp5XAFv0vFQiXNQc7PYIPO4r6WMOJycQcUoEENPZryMZ5m7peu4JgFKXUpGwkR2zUm4d4LLc4QHVptUfX8nv2E4MAYGKm6tq1mckqqunz8bUYmD53xI%2BddW7oXX0Yrs79zjnUX%2FsuDckYvXuKucq0ETi6e%2FxdN%2FrL%2BtxZcK1Y8N0iczTOFUs%2FKbhKg8ZwA6F2KK5%2BT%2FOlDaRfQD4mNoBsRSjTXeXMD36sDM8XnazzOUKDvjyKx%2BNePIwSeWEgdCjbRTdXV0%3D
          type: string
          minLength: 684
          maxLength: 2052
          pattern: '[a-zA-Z0-9%]'
      required:
        - code1
        - code2
    postTokenResponse:
      description: 
      type: object
      properties:
        status:
          $ref: '../../components/parameters/Status.yaml'
        accessToken:
          $ref: '../../components/header/AccessToken.yaml'
    errorResponseBody:
      description: ERRORレスポンス
      type: object
      properties:
        status:
          $ref: '../../components/parameters/StatusError.yaml'
        errorInfo:
          $ref: '../../components/parameters/ErrorInfo.yaml'
    errorResponseBody500:
      $ref: '../../components/parameters/errorResponseBody500.yaml'

